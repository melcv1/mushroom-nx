# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build api-nest`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t api-nest`.
#FROM docker.io/node:lts-alpine

#ENV HOST=0.0.0.0
#ENV PORT=3000 

#WORKDIR /app

#RUN addgroup --system api-nest && \
 #       adduser --system -G api-nest api-nest

#cOPY  . .
#RUN chown -R api-nest:api-nest .

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
#RUN npm install

#CMD [ "node", "api-nest" ]

###################
#FROM node:lts-alpine
#WORKDIR /app
#COPY package.json ./
#RUN npm install -g nx
#RUN npm install
#COPY . .
#RUN nx build app-movie
#EXPOSE 4200
#CMD ["nx", "run", "app-movie:serve:development"]

# Use a specific version of the official Node.js image based on the slim variant
#FROM node:lts-alpine AS build

# Set the working directory
#WORKDIR /usr/src/root

# Copy required files for installing dependencies
#COPY package.json package-lock.json nx.json tsconfig.base.json  ./

# Be sure to include all the necessary components your project targets, such as e2e tests. Otherwise, the Docker image build may fail. 
#COPY apps/api-nest/ ./apps/api-nest/

# Install dependencies
#RUN npm ci

# Install nx globally to use for building the project
#RUN npm install -g nx

# Prevent NX Daemon from starting
#ENV NX_DAEMON=false

# Build the application
#RUN nx run api-nest:build

# Stage 2: Run the application
#FROM node:lts-alpine AS runtime

# Set the working directory
#WORKDIR /usr/src/app

# Copy the build output to run the application
#COPY --from=build /usr/src/root/dist/apps/api-nest /usr/src/root/dist/apps/api-nest

# Expose the application's port
#EXPOSE 3000

# Run the NestJS application directly with Node
#CMD ["node", "dist/apps/api-nest/main.js"]


FROM node:lts-alpine
WORKDIR /app
COPY package.json package-lock.json nx.json tsconfig.base.json  ./
COPY apps/api-nest/ ./apps/api-nest/

# Be sure to include all the necessary components your project targets, such as e2e tests. Otherwise, the Docker image build may fail. 
COPY apps/api-nest-e2e/ ./apps/api-nest-e2e/

# Install npm dependencies
RUN npm ci


RUN npm install -g nx
RUN npm install
COPY . .
RUN nx build api-nest
EXPOSE 3000
CMD ["nx", "run", "api-nest:serve:development"]